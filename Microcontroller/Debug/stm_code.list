
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004468  08004468  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004468  08004468  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004468  08004468  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  0800447c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800447c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc13  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8a  00000000  00000000  0002dc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002fa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c5  00000000  00000000  00030688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e3b  00000000  00000000  0003104d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa58  00000000  00000000  00045e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000842fc  00000000  00000000  000558e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003434  00000000  00000000  000d9bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000dd010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004418 	.word	0x08004418

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004418 	.word	0x08004418

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd26 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f832 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa86 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 fa66 	bl	80006a8 <MX_DMA_Init>
  MX_TIM1_Init();
 80001dc:	f000 f886 	bl	80002ec <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e0:	f000 f916 	bl	8000410 <MX_TIM2_Init>
  MX_TIM15_Init();
 80001e4:	f000 f9a0 	bl	8000528 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 fa2e 	bl	8000648 <MX_USART2_UART_Init>
//  printf("test");
//  buffer_time[19] = '\r';
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 80001ec:	2100      	movs	r1, #0
 80001ee:	480d      	ldr	r0, [pc, #52]	; (8000224 <main+0x5c>)
 80001f0:	f002 fe44 	bl	8002e7c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80001f4:	2100      	movs	r1, #0
 80001f6:	480c      	ldr	r0, [pc, #48]	; (8000228 <main+0x60>)
 80001f8:	f002 fe40 	bl	8002e7c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80001fc:	2104      	movs	r1, #4
 80001fe:	480b      	ldr	r0, [pc, #44]	; (800022c <main+0x64>)
 8000200:	f002 fe3c 	bl	8002e7c <HAL_TIM_IC_Start>
  buffer_time[1] = '1';
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x68>)
 8000206:	2231      	movs	r2, #49	; 0x31
 8000208:	705a      	strb	r2, [r3, #1]
  buffer_time[3] = '2';
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <main+0x68>)
 800020c:	2232      	movs	r2, #50	; 0x32
 800020e:	70da      	strb	r2, [r3, #3]
  buffer_time[5] = '3';
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <main+0x68>)
 8000212:	2233      	movs	r2, #51	; 0x33
 8000214:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *) buffer_time, 6);
 8000216:	2206      	movs	r2, #6
 8000218:	4905      	ldr	r1, [pc, #20]	; (8000230 <main+0x68>)
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0x6c>)
 800021c:	f003 fc38 	bl	8003a90 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	e7fe      	b.n	8000220 <main+0x58>
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028
 8000228:	20000074 	.word	0x20000074
 800022c:	200000c0 	.word	0x200000c0
 8000230:	200001d8 	.word	0x200001d8
 8000234:	2000010c 	.word	0x2000010c

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b09c      	sub	sp, #112	; 0x70
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f004 f8ba 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2230      	movs	r2, #48	; 0x30
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 f8ac 	bl	80043c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000278:	2300      	movs	r3, #0
 800027a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000280:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f948 	bl	800151c <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000292:	f000 fb17 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f970 	bl	8002598 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002be:	f000 fb01 	bl	80008c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
 80002c2:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80002c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002c8:	2300      	movs	r3, #0
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fb96 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002de:	f000 faf1 	bl	80008c4 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3770      	adds	r7, #112	; 0x70
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000300:	f107 031c 	add.w	r3, r7, #28
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000328:	4b37      	ldr	r3, [pc, #220]	; (8000408 <MX_TIM1_Init+0x11c>)
 800032a:	4a38      	ldr	r2, [pc, #224]	; (800040c <MX_TIM1_Init+0x120>)
 800032c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b34      	ldr	r3, [pc, #208]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <MX_TIM1_Init+0x11c>)
 800033c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b31      	ldr	r3, [pc, #196]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000348:	4b2f      	ldr	r3, [pc, #188]	; (8000408 <MX_TIM1_Init+0x11c>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000354:	482c      	ldr	r0, [pc, #176]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000356:	f002 fcd9 	bl	8002d0c <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000360:	f000 fab0 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800036e:	4619      	mov	r1, r3
 8000370:	4825      	ldr	r0, [pc, #148]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000372:	f002 feff 	bl	8003174 <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800037c:	f000 faa2 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000380:	4821      	ldr	r0, [pc, #132]	; (8000408 <MX_TIM1_Init+0x11c>)
 8000382:	f002 fd1a 	bl	8002dba <HAL_TIM_IC_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800038c:	f000 fa9a 	bl	80008c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000390:	2304      	movs	r3, #4
 8000392:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000394:	2350      	movs	r3, #80	; 0x50
 8000396:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000398:	2300      	movs	r3, #0
 800039a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80003a0:	f107 031c 	add.w	r3, r7, #28
 80003a4:	4619      	mov	r1, r3
 80003a6:	4818      	ldr	r0, [pc, #96]	; (8000408 <MX_TIM1_Init+0x11c>)
 80003a8:	f002 ffad 	bl	8003306 <HAL_TIM_SlaveConfigSynchro>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80003b2:	f000 fa87 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <MX_TIM1_Init+0x11c>)
 80003ca:	f003 faad 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80003d4:	f000 fa76 	bl	80008c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003d8:	2300      	movs	r3, #0
 80003da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80003dc:	2301      	movs	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 80003e0:	230c      	movs	r3, #12
 80003e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_TIM1_Init+0x11c>)
 80003f0:	f002 fe24 	bl	800303c <HAL_TIM_IC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80003fa:	f000 fa63 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3740      	adds	r7, #64	; 0x40
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000028 	.word	0x20000028
 800040c:	40012c00 	.word	0x40012c00

08000410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b090      	sub	sp, #64	; 0x40
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000424:	f107 031c 	add.w	r3, r7, #28
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000440:	463b      	mov	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800044c:	4b35      	ldr	r3, [pc, #212]	; (8000524 <MX_TIM2_Init+0x114>)
 800044e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000454:	4b33      	ldr	r3, [pc, #204]	; (8000524 <MX_TIM2_Init+0x114>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_TIM2_Init+0x114>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8000460:	4b30      	ldr	r3, [pc, #192]	; (8000524 <MX_TIM2_Init+0x114>)
 8000462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000468:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <MX_TIM2_Init+0x114>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046e:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <MX_TIM2_Init+0x114>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000474:	482b      	ldr	r0, [pc, #172]	; (8000524 <MX_TIM2_Init+0x114>)
 8000476:	f002 fc49 	bl	8002d0c <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000480:	f000 fa20 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000488:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800048a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800048e:	4619      	mov	r1, r3
 8000490:	4824      	ldr	r0, [pc, #144]	; (8000524 <MX_TIM2_Init+0x114>)
 8000492:	f002 fe6f 	bl	8003174 <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800049c:	f000 fa12 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004a0:	4820      	ldr	r0, [pc, #128]	; (8000524 <MX_TIM2_Init+0x114>)
 80004a2:	f002 fc8a 	bl	8002dba <HAL_TIM_IC_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80004ac:	f000 fa0a 	bl	80008c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80004b0:	2304      	movs	r3, #4
 80004b2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80004b4:	2350      	movs	r3, #80	; 0x50
 80004b6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80004c0:	f107 031c 	add.w	r3, r7, #28
 80004c4:	4619      	mov	r1, r3
 80004c6:	4817      	ldr	r0, [pc, #92]	; (8000524 <MX_TIM2_Init+0x114>)
 80004c8:	f002 ff1d 	bl	8003306 <HAL_TIM_SlaveConfigSynchro>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80004d2:	f000 f9f7 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <MX_TIM2_Init+0x114>)
 80004e6:	f003 fa1f 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80004f0:	f000 f9e8 	bl	80008c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004f4:	2300      	movs	r3, #0
 80004f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004f8:	2301      	movs	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 80004fc:	230c      	movs	r3, #12
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <MX_TIM2_Init+0x114>)
 800050c:	f002 fd96 	bl	800303c <HAL_TIM_IC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000516:	f000 f9d5 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	3740      	adds	r7, #64	; 0x40
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000074 	.word	0x20000074

08000528 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b090      	sub	sp, #64	; 0x40
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <MX_TIM15_Init+0x118>)
 8000566:	4a37      	ldr	r2, [pc, #220]	; (8000644 <MX_TIM15_Init+0x11c>)
 8000568:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <MX_TIM15_Init+0x118>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <MX_TIM15_Init+0x118>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <MX_TIM15_Init+0x118>)
 8000578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <MX_TIM15_Init+0x118>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <MX_TIM15_Init+0x118>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <MX_TIM15_Init+0x118>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000590:	482b      	ldr	r0, [pc, #172]	; (8000640 <MX_TIM15_Init+0x118>)
 8000592:	f002 fbbb 	bl	8002d0c <HAL_TIM_Base_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800059c:	f000 f992 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80005a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005aa:	4619      	mov	r1, r3
 80005ac:	4824      	ldr	r0, [pc, #144]	; (8000640 <MX_TIM15_Init+0x118>)
 80005ae:	f002 fde1 	bl	8003174 <HAL_TIM_ConfigClockSource>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80005b8:	f000 f984 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <MX_TIM15_Init+0x118>)
 80005be:	f002 fbfc 	bl	8002dba <HAL_TIM_IC_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 80005c8:	f000 f97c 	bl	80008c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80005cc:	2304      	movs	r3, #4
 80005ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80005d0:	2360      	movs	r3, #96	; 0x60
 80005d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <MX_TIM15_Init+0x118>)
 80005e4:	f002 fe8f 	bl	8003306 <HAL_TIM_SlaveConfigSynchro>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 80005ee:	f000 f969 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_TIM15_Init+0x118>)
 8000602:	f003 f991 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 800060c:	f000 f95a 	bl	80008c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 8000618:	230c      	movs	r3, #12
 800061a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2204      	movs	r2, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_TIM15_Init+0x118>)
 8000628:	f002 fd08 	bl	800303c <HAL_TIM_IC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000632:	f000 f947 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3740      	adds	r7, #64	; 0x40
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000c0 	.word	0x200000c0
 8000644:	40014000 	.word	0x40014000

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <MX_USART2_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1400;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 8000654:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART2_UART_Init+0x58>)
 800068c:	f003 f9b2 	bl	80039f4 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 f915 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000010c 	.word	0x2000010c
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <MX_DMA_Init+0x38>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DMA_Init+0x38>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 fbe7 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006d0:	2011      	movs	r0, #17
 80006d2:	f000 fc00 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_GPIO_Init+0x2c>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <MX_GPIO_Init+0x2c>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_GPIO_Init+0x2c>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	measured_values_tim1[counter] = TIM1->CCR1;
 800071c:	4a5e      	ldr	r2, [pc, #376]	; (8000898 <HAL_UART_TxCpltCallback+0x184>)
 800071e:	4b5f      	ldr	r3, [pc, #380]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000724:	495e      	ldr	r1, [pc, #376]	; (80008a0 <HAL_UART_TxCpltCallback+0x18c>)
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	measured_values_tim2[counter] = TIM2->CCR1;
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	4b5b      	ldr	r3, [pc, #364]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000734:	495b      	ldr	r1, [pc, #364]	; (80008a4 <HAL_UART_TxCpltCallback+0x190>)
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	measured_values_tim15[counter] = TIM15->CCR2;
 800073a:	4a5b      	ldr	r2, [pc, #364]	; (80008a8 <HAL_UART_TxCpltCallback+0x194>)
 800073c:	4b57      	ldr	r3, [pc, #348]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000742:	495a      	ldr	r1, [pc, #360]	; (80008ac <HAL_UART_TxCpltCallback+0x198>)
 8000744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	counter++;
 8000748:	4b54      	ldr	r3, [pc, #336]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a53      	ldr	r2, [pc, #332]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 8000750:	6013      	str	r3, [r2, #0]
	if(counter >= TOTAL_VALUES)
 8000752:	4b52      	ldr	r3, [pc, #328]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b04      	cmp	r3, #4
 8000758:	f340 8098 	ble.w	800088c <HAL_UART_TxCpltCallback+0x178>
	{
		timer1_avg = 0;
 800075c:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
		timer2_avg = 0;
 8000762:	4b54      	ldr	r3, [pc, #336]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
		timer15_avg = 0;
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
		counter = 0;
 800076e:	4b4b      	ldr	r3, [pc, #300]	; (800089c <HAL_UART_TxCpltCallback+0x188>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]

		for(int k = 0; k < TOTAL_VALUES; k++)
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e01d      	b.n	80007b6 <HAL_UART_TxCpltCallback+0xa2>
		{
			timer1_avg += measured_values_tim1[k];
 800077a:	4a49      	ldr	r2, [pc, #292]	; (80008a0 <HAL_UART_TxCpltCallback+0x18c>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000782:	4b4b      	ldr	r3, [pc, #300]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a49      	ldr	r2, [pc, #292]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 800078a:	6013      	str	r3, [r2, #0]
			timer2_avg += measured_values_tim2[k];
 800078c:	4a45      	ldr	r2, [pc, #276]	; (80008a4 <HAL_UART_TxCpltCallback+0x190>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000794:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4413      	add	r3, r2
 800079a:	4a46      	ldr	r2, [pc, #280]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 800079c:	6013      	str	r3, [r2, #0]
			timer15_avg += measured_values_tim15[k];
 800079e:	4a43      	ldr	r2, [pc, #268]	; (80008ac <HAL_UART_TxCpltCallback+0x198>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a6:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a42      	ldr	r2, [pc, #264]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 80007ae:	6013      	str	r3, [r2, #0]
		for(int k = 0; k < TOTAL_VALUES; k++)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	ddde      	ble.n	800077a <HAL_UART_TxCpltCallback+0x66>
		}
		timer1_avg /= 25;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a3e      	ldr	r2, [pc, #248]	; (80008bc <HAL_UART_TxCpltCallback+0x1a8>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	4a39      	ldr	r2, [pc, #228]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 80007ca:	6013      	str	r3, [r2, #0]
		timer2_avg /= 25;
 80007cc:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a3a      	ldr	r2, [pc, #232]	; (80008bc <HAL_UART_TxCpltCallback+0x1a8>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	4a36      	ldr	r2, [pc, #216]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 80007da:	6013      	str	r3, [r2, #0]
		timer15_avg /= 25;
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a36      	ldr	r2, [pc, #216]	; (80008bc <HAL_UART_TxCpltCallback+0x1a8>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 80007ea:	6013      	str	r3, [r2, #0]

		// enlevement du bruit
		if(timer1_avg > 260)
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80007f4:	d906      	bls.n	8000804 <HAL_UART_TxCpltCallback+0xf0>
			timer1_avg -= 260;
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80007fe:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e002      	b.n	800080a <HAL_UART_TxCpltCallback+0xf6>
		else
			timer1_avg = 4;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 8000806:	2204      	movs	r2, #4
 8000808:	601a      	str	r2, [r3, #0]
		if(timer2_avg > 320)
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000812:	d906      	bls.n	8000822 <HAL_UART_TxCpltCallback+0x10e>
			timer2_avg -= 320;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e002      	b.n	8000828 <HAL_UART_TxCpltCallback+0x114>
		else
			timer2_avg = 4;
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 8000824:	2204      	movs	r2, #4
 8000826:	601a      	str	r2, [r3, #0]
		if(timer15_avg > 300)
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000830:	d905      	bls.n	800083e <HAL_UART_TxCpltCallback+0x12a>
			timer15_avg -= 220;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3bdc      	subs	r3, #220	; 0xdc
 8000838:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	e002      	b.n	8000844 <HAL_UART_TxCpltCallback+0x130>
		else
			timer15_avg = 4;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 8000840:	2204      	movs	r2, #4
 8000842:	601a      	str	r2, [r3, #0]





		if(timer1_avg > 255)
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d902      	bls.n	8000852 <HAL_UART_TxCpltCallback+0x13e>
			timer1_avg = 255;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	601a      	str	r2, [r3, #0]
		if(timer2_avg > 255)
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2bff      	cmp	r3, #255	; 0xff
 8000858:	d902      	bls.n	8000860 <HAL_UART_TxCpltCallback+0x14c>
			timer2_avg = 255;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	601a      	str	r2, [r3, #0]
		if(timer15_avg > 255)
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2bff      	cmp	r3, #255	; 0xff
 8000866:	d902      	bls.n	800086e <HAL_UART_TxCpltCallback+0x15a>
			timer15_avg = 255;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	601a      	str	r2, [r3, #0]
      


		buffer_time[0] = (uint8_t) timer1_avg;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_UART_TxCpltCallback+0x19c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_UART_TxCpltCallback+0x1ac>)
 8000876:	701a      	strb	r2, [r3, #0]
		buffer_time[2] = (uint8_t) timer2_avg;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_UART_TxCpltCallback+0x1a0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_UART_TxCpltCallback+0x1ac>)
 8000880:	709a      	strb	r2, [r3, #2]
		buffer_time[4] = (uint8_t) timer15_avg;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_UART_TxCpltCallback+0x1a4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_UART_TxCpltCallback+0x1ac>)
 800088a:	711a      	strb	r2, [r3, #4]
	}


}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40012c00 	.word	0x40012c00
 800089c:	200001e0 	.word	0x200001e0
 80008a0:	200001e4 	.word	0x200001e4
 80008a4:	200001f8 	.word	0x200001f8
 80008a8:	40014000 	.word	0x40014000
 80008ac:	2000020c 	.word	0x2000020c
 80008b0:	20000220 	.word	0x20000220
 80008b4:	20000224 	.word	0x20000224
 80008b8:	20000228 	.word	0x20000228
 80008bc:	51eb851f 	.word	0x51eb851f
 80008c0:	200001d8 	.word	0x200001d8

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a47      	ldr	r2, [pc, #284]	; (8000a54 <HAL_TIM_Base_MspInit+0x13c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12a      	bne.n	8000990 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800094e:	623b      	str	r3, [r7, #32]
 8000950:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a40      	ldr	r2, [pc, #256]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800096a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800097c:	2306      	movs	r3, #6
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 fc55 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800098e:	e05c      	b.n	8000a4a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000998:	d129      	bne.n	80009ee <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ca:	2301      	movs	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009da:	2301      	movs	r3, #1
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fc26 	bl	8001238 <HAL_GPIO_Init>
}
 80009ec:	e02d      	b.n	8000a4a <HAL_TIM_Base_MspInit+0x132>
  else if(htim_base->Instance==TIM15)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <HAL_TIM_Base_MspInit+0x144>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d128      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 80009fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1a:	6153      	str	r3, [r2, #20]
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_TIM_Base_MspInit+0x140>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000a38:	2309      	movs	r3, #9
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f000 fbf7 	bl	8001238 <HAL_GPIO_Init>
}
 8000a4a:	bf00      	nop
 8000a4c:	3738      	adds	r7, #56	; 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40012c00 	.word	0x40012c00
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40014000 	.word	0x40014000

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <HAL_UART_MspInit+0xcc>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d14f      	bne.n	8000b22 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_UART_MspInit+0xd0>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000ab2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fbb1 	bl	8001238 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0xd8>)
 8000ada:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000ade:	2210      	movs	r2, #16
 8000ae0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000afc:	2220      	movs	r2, #32
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000b08:	f000 f9ff 	bl	8000f0a <HAL_DMA_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000b12:	f7ff fed7 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000b1a:	671a      	str	r2, [r3, #112]	; 0x70
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <HAL_UART_MspInit+0xd4>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	20000194 	.word	0x20000194
 8000b38:	40020080 	.word	0x40020080

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f88e 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <DMA1_Channel7_IRQHandler+0x10>)
 8000b96:	f000 fa5e 	bl	8001056 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000194 	.word	0x20000194

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f003 fbeb 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fae5 	bl	80001c8 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	08004470 	.word	0x08004470
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	20000230 	.word	0x20000230

08000c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f92b 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe4a 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f943 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f90b 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000022c 	.word	0x2000022c

08000cd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000022c 	.word	0x2000022c

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e037      	b.n	8000f90 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f940 	bl	80011f8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}  
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_DMA_Start_IT+0x20>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e04a      	b.n	800104e <HAL_DMA_Start_IT+0xb6>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d13a      	bne.n	8001040 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f8d4 	bl	800119c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 020e 	orr.w	r2, r2, #14
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e00f      	b.n	800102e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 020a 	orr.w	r2, r2, #10
 800101c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0204 	bic.w	r2, r2, #4
 800102c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0201 	orr.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e005      	b.n	800104c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001048:	2302      	movs	r3, #2
 800104a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800104c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	2204      	movs	r2, #4
 8001074:	409a      	lsls	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d024      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x72>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01f      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0204 	bic.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ae:	2104      	movs	r1, #4
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d06a      	beq.n	8001194 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80010c6:	e065      	b.n	8001194 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2202      	movs	r2, #2
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d02c      	beq.n	8001132 <HAL_DMA_IRQHandler+0xdc>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d027      	beq.n	8001132 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10b      	bne.n	8001108 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 020a 	bic.w	r2, r2, #10
 80010fe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	2102      	movs	r1, #2
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	2b00      	cmp	r3, #0
 8001126:	d035      	beq.n	8001194 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001130:	e030      	b.n	8001194 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	2208      	movs	r2, #8
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d028      	beq.n	8001194 <HAL_DMA_IRQHandler+0x13e>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	4798      	blx	r3
    }
  }
}  
 8001192:	e7ff      	b.n	8001194 <HAL_DMA_IRQHandler+0x13e>
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d108      	bne.n	80011dc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011da:	e007      	b.n	80011ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <DMA_CalcBaseAndBitshift+0x34>)
 8001208:	4413      	add	r3, r2
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <DMA_CalcBaseAndBitshift+0x38>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	009a      	lsls	r2, r3, #2
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <DMA_CalcBaseAndBitshift+0x3c>)
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	bffdfff8 	.word	0xbffdfff8
 8001230:	cccccccd 	.word	0xcccccccd
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e14e      	b.n	80014e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8140 	beq.w	80014e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 809a 	beq.w	80014e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c4:	4a50      	ldr	r2, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ee:	d013      	beq.n	8001418 <HAL_GPIO_Init+0x1e0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1dc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a45      	ldr	r2, [pc, #276]	; (8001510 <HAL_GPIO_Init+0x2d8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1d8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a44      	ldr	r2, [pc, #272]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1d4>
 8001408:	2303      	movs	r3, #3
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 800140c:	2305      	movs	r3, #5
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001418:	2300      	movs	r3, #0
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142a:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800145c:	4a2e      	ldr	r2, [pc, #184]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001486:	4a24      	ldr	r2, [pc, #144]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f aea9 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001522:	af00      	add	r7, sp, #0
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800152c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	f001 b823 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 817d 	beq.w	8001852 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001558:	4bbc      	ldr	r3, [pc, #752]	; (800184c <HAL_RCC_OscConfig+0x330>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00c      	beq.n	800157e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001564:	4bb9      	ldr	r3, [pc, #740]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d15c      	bne.n	800162a <HAL_RCC_OscConfig+0x10e>
 8001570:	4bb6      	ldr	r3, [pc, #728]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d155      	bne.n	800162a <HAL_RCC_OscConfig+0x10e>
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001592:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x94>
 80015aa:	4ba8      	ldr	r3, [pc, #672]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e015      	b.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015d8:	4b9c      	ldr	r3, [pc, #624]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015e8:	fa92 f2a2 	rbit	r2, r2
 80015ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 811f 	beq.w	8001850 <HAL_RCC_OscConfig+0x334>
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8116 	bne.w	8001850 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f000 bfaf 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x12e>
 800163c:	4b83      	ldr	r3, [pc, #524]	; (800184c <HAL_RCC_OscConfig+0x330>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a82      	ldr	r2, [pc, #520]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e036      	b.n	80016b8 <HAL_RCC_OscConfig+0x19c>
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x158>
 800165a:	4b7c      	ldr	r3, [pc, #496]	; (800184c <HAL_RCC_OscConfig+0x330>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7b      	ldr	r2, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b79      	ldr	r3, [pc, #484]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a78      	ldr	r2, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x330>)
 800166c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e021      	b.n	80016b8 <HAL_RCC_OscConfig+0x19c>
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x184>
 8001686:	4b71      	ldr	r3, [pc, #452]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a70      	ldr	r2, [pc, #448]	; (800184c <HAL_RCC_OscConfig+0x330>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6e      	ldr	r3, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6d      	ldr	r2, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x19c>
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	f023 020f 	bic.w	r2, r3, #15
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	495f      	ldr	r1, [pc, #380]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d059      	beq.n	8001796 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff faf5 	bl	8000cd0 <HAL_GetTick>
 80016e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff faf0 	bl	8000cd0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	; 0x64
 80016fa:	d902      	bls.n	8001702 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f000 bf43 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001716:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <HAL_RCC_OscConfig+0x218>
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e015      	b.n	8001760 <HAL_RCC_OscConfig+0x244>
 8001734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001738:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001750:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x330>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001764:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001768:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800176c:	fa92 f2a2 	rbit	r2, r2
 8001770:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001774:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001778:	fab2 f282 	clz	r2, r2
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f002 021f 	and.w	r2, r2, #31
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ab      	beq.n	80016ec <HAL_RCC_OscConfig+0x1d0>
 8001794:	e05d      	b.n	8001852 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fa9b 	bl	8000cd0 <HAL_GetTick>
 800179a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fa96 	bl	8000cd0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d902      	bls.n	80017b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f000 bee9 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
 80017b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80017ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2cc>
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e015      	b.n	8001814 <HAL_RCC_OscConfig+0x2f8>
 80017e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001800:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001804:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_RCC_OscConfig+0x330>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001818:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800181c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001820:	fa92 f2a2 	rbit	r2, r2
 8001824:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001828:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f002 021f 	and.w	r2, r2, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ab      	bne.n	80017a0 <HAL_RCC_OscConfig+0x284>
 8001848:	e003      	b.n	8001852 <HAL_RCC_OscConfig+0x336>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 817d 	beq.w	8001b62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001868:	4ba6      	ldr	r3, [pc, #664]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001874:	4ba3      	ldr	r3, [pc, #652]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d172      	bne.n	8001966 <HAL_RCC_OscConfig+0x44a>
 8001880:	4ba0      	ldr	r3, [pc, #640]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d16c      	bne.n	8001966 <HAL_RCC_OscConfig+0x44a>
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800189e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_OscConfig+0x3a0>
 80018b6:	4b93      	ldr	r3, [pc, #588]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	e013      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c8>
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	2202      	movs	r2, #2
 80018e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018ee:	fa92 f2a2 	rbit	r2, r2
 80018f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018fa:	fab2 f282 	clz	r2, r2
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f042 0220 	orr.w	r2, r2, #32
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f002 021f 	and.w	r2, r2, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <HAL_RCC_OscConfig+0x410>
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d002      	beq.n	800192c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f000 be2e 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	21f8      	movs	r1, #248	; 0xf8
 8001942:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800194a:	fa91 f1a1 	rbit	r1, r1
 800194e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001952:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001956:	fab1 f181 	clz	r1, r1
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	408b      	lsls	r3, r1
 800195e:	4969      	ldr	r1, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001964:	e0fd      	b.n	8001b62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8088 	beq.w	8001a88 <HAL_RCC_OscConfig+0x56c>
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800198a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	461a      	mov	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f994 	bl	8000cd0 <HAL_GetTick>
 80019a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff f98f 	bl	8000cd0 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d902      	bls.n	80019c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	f000 bde2 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80019d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x500>
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a18:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0af      	beq.n	80019ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	21f8      	movs	r1, #248	; 0xf8
 8001a64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a6c:	fa91 f1a1 	rbit	r1, r1
 8001a70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a78:	fab1 f181 	clz	r1, r1
 8001a7c:	b2c9      	uxtb	r1, r1
 8001a7e:	408b      	lsls	r3, r1
 8001a80:	4920      	ldr	r1, [pc, #128]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
 8001a86:	e06c      	b.n	8001b62 <HAL_RCC_OscConfig+0x646>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f90c 	bl	8000cd0 <HAL_GetTick>
 8001ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff f907 	bl	8000cd0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f000 bd5a 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d104      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5ec>
 8001afe:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <HAL_RCC_OscConfig+0x5e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e015      	b.n	8001b30 <HAL_RCC_OscConfig+0x614>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b2c:	4bc8      	ldr	r3, [pc, #800]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2202      	movs	r2, #2
 8001b32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ad      	bne.n	8001abe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8110 	beq.w	8001d98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d079      	beq.n	8001c7c <HAL_RCC_OscConfig+0x760>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4bab      	ldr	r3, [pc, #684]	; (8001e54 <HAL_RCC_OscConfig+0x938>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	461a      	mov	r2, r3
 8001bae:	2301      	movs	r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f88d 	bl	8000cd0 <HAL_GetTick>
 8001bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f888 	bl	8000cd0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d902      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f000 bcdb 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bec:	2202      	movs	r2, #2
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c10:	2202      	movs	r2, #2
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2c:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c38:	2102      	movs	r1, #2
 8001c3a:	6019      	str	r1, [r3, #0]
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f1a3 	rbit	r1, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c52:	6019      	str	r1, [r3, #0]
  return result;
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0a0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x6a0>
 8001c7a:	e08d      	b.n	8001d98 <HAL_RCC_OscConfig+0x87c>
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ca8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x938>)
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f807 	bl	8000cd0 <HAL_GetTick>
 8001cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f802 	bl	8000cd0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d902      	bls.n	8001cde <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	f000 bc55 	b.w	8002588 <HAL_RCC_OscConfig+0x106c>
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d56:	2102      	movs	r1, #2
 8001d58:	6019      	str	r1, [r3, #0]
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f1a3 	rbit	r1, r3
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d70:	6019      	str	r1, [r3, #0]
  return result;
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d197      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 81a1 	beq.w	80020f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d116      	bne.n	8001dee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	61d3      	str	r3, [r2, #28]
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001de6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCC_OscConfig+0x93c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11a      	bne.n	8001e30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x93c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_RCC_OscConfig+0x93c>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7fe ff63 	bl	8000cd0 <HAL_GetTick>
 8001e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	e009      	b.n	8001e24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe ff5e 	bl	8000cd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e3b1      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_RCC_OscConfig+0x93c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ef      	beq.n	8001e10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCC_OscConfig+0x940>
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a02      	ldr	r2, [pc, #8]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e03c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x9ac>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	10908120 	.word	0x10908120
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x96a>
 8001e6c:	4bc1      	ldr	r3, [pc, #772]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4ac0      	ldr	r2, [pc, #768]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	4bbe      	ldr	r3, [pc, #760]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4abd      	ldr	r2, [pc, #756]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e020      	b.n	8001ec8 <HAL_RCC_OscConfig+0x9ac>
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x994>
 8001e96:	4bb7      	ldr	r3, [pc, #732]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4ab6      	ldr	r2, [pc, #728]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4bb4      	ldr	r3, [pc, #720]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4ab3      	ldr	r2, [pc, #716]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x9ac>
 8001eb0:	4bb0      	ldr	r3, [pc, #704]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4aaf      	ldr	r2, [pc, #700]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4bad      	ldr	r3, [pc, #692]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4aac      	ldr	r2, [pc, #688]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8081 	beq.w	8001fdc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe fef9 	bl	8000cd0 <HAL_GetTick>
 8001ede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7fe fef4 	bl	8000cd0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e345      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f42:	601a      	str	r2, [r3, #0]
  return result;
 8001f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f48:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_OscConfig+0xa4c>
 8001f62:	4b84      	ldr	r3, [pc, #528]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	e013      	b.n	8001f90 <HAL_RCC_OscConfig+0xa74>
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f70:	2202      	movs	r2, #2
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	4b79      	ldr	r3, [pc, #484]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f98:	2102      	movs	r1, #2
 8001f9a:	6011      	str	r1, [r2, #0]
 8001f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	fa92 f1a2 	rbit	r1, r2
 8001faa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fb2:	6011      	str	r1, [r2, #0]
  return result;
 8001fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	fab2 f282 	clz	r2, r2
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f002 021f 	and.w	r2, r2, #31
 8001fce:	2101      	movs	r1, #1
 8001fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d084      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x9c8>
 8001fda:	e07f      	b.n	80020dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe fe78 	bl	8000cd0 <HAL_GetTick>
 8001fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fe73 	bl	8000cd0 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e2c4      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002006:	2202      	movs	r2, #2
 8002008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800202a:	2202      	movs	r2, #2
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002044:	601a      	str	r2, [r3, #0]
  return result;
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800204e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0xb4e>
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	e013      	b.n	8002092 <HAL_RCC_OscConfig+0xb76>
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002096:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800209a:	2102      	movs	r1, #2
 800209c:	6011      	str	r1, [r2, #0]
 800209e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	fa92 f1a2 	rbit	r1, r2
 80020ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020b4:	6011      	str	r1, [r2, #0]
  return result;
 80020b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f002 021f 	and.w	r2, r2, #31
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d184      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 80020ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8242 	beq.w	8002586 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_RCC_OscConfig+0xc58>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b08      	cmp	r3, #8
 800210c:	f000 8213 	beq.w	8002536 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b02      	cmp	r3, #2
 800211e:	f040 8162 	bne.w	80023e6 <HAL_RCC_OscConfig+0xeca>
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800212a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800212e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002146:	601a      	str	r2, [r3, #0]
  return result;
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002150:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800215c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	461a      	mov	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fdb2 	bl	8000cd0 <HAL_GetTick>
 800216c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	e00c      	b.n	800218c <HAL_RCC_OscConfig+0xc70>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fdaa 	bl	8000cd0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1fd      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021b0:	601a      	str	r2, [r3, #0]
  return result;
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_OscConfig+0xcba>
 80021d0:	4bb0      	ldr	r3, [pc, #704]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e027      	b.n	8002226 <HAL_RCC_OscConfig+0xd0a>
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4b9c      	ldr	r3, [pc, #624]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800222a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800222e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002232:	6011      	str	r1, [r2, #0]
 8002234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002238:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fa92 f1a2 	rbit	r1, r2
 8002242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002246:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800224a:	6011      	str	r1, [r2, #0]
  return result;
 800224c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002250:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d182      	bne.n	8002178 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	430b      	orrs	r3, r1
 8002294:	497f      	ldr	r1, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022be:	601a      	str	r2, [r3, #0]
  return result;
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	461a      	mov	r2, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe fcf6 	bl	8000cd0 <HAL_GetTick>
 80022e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	e009      	b.n	80022fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fcf1 	bl	8000cd0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e144      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002322:	601a      	str	r2, [r3, #0]
  return result;
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800232c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0xe2c>
 8002342:	4b54      	ldr	r3, [pc, #336]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e027      	b.n	8002398 <HAL_RCC_OscConfig+0xe7c>
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023a4:	6011      	str	r1, [r2, #0]
 80023a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	fa92 f1a2 	rbit	r1, r2
 80023b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023bc:	6011      	str	r1, [r2, #0]
  return result;
 80023be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f002 021f 	and.w	r2, r2, #31
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d082      	beq.n	80022ea <HAL_RCC_OscConfig+0xdce>
 80023e4:	e0cf      	b.n	8002586 <HAL_RCC_OscConfig+0x106a>
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002414:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	461a      	mov	r2, r3
 8002428:	2300      	movs	r3, #0
 800242a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fc50 	bl	8000cd0 <HAL_GetTick>
 8002430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e009      	b.n	800244a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002436:	f7fe fc4b 	bl	8000cd0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e09e      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800246e:	601a      	str	r2, [r3, #0]
  return result;
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002478:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d104      	bne.n	8002498 <HAL_RCC_OscConfig+0xf7c>
 800248e:	4b01      	ldr	r3, [pc, #4]	; (8002494 <HAL_RCC_OscConfig+0xf78>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e029      	b.n	80024e8 <HAL_RCC_OscConfig+0xfcc>
 8002494:	40021000 	.word	0x40021000
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x1078>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f4:	6011      	str	r1, [r2, #0]
 80024f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	fa92 f1a2 	rbit	r1, r2
 8002504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002508:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800250c:	6011      	str	r1, [r2, #0]
  return result;
 800250e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002512:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d180      	bne.n	8002436 <HAL_RCC_OscConfig+0xf1a>
 8002534:	e027      	b.n	8002586 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e01e      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_OscConfig+0x1078>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002556:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	429a      	cmp	r2, r3
 8002568:	d10b      	bne.n	8002582 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800256a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800256e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b09e      	sub	sp, #120	; 0x78
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e162      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b90      	ldr	r3, [pc, #576]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d910      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	498b      	ldr	r1, [pc, #556]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b89      	ldr	r3, [pc, #548]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e14a      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b82      	ldr	r3, [pc, #520]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	497f      	ldr	r1, [pc, #508]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80dc 	beq.w	80027c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d13c      	bne.n	800268e <HAL_RCC_ClockConfig+0xf6>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_RCC_ClockConfig+0xa6>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	e00f      	b.n	800265e <HAL_RCC_ClockConfig+0xc6>
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
 800264c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002650:	663b      	str	r3, [r7, #96]	; 0x60
 8002652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002662:	65ba      	str	r2, [r7, #88]	; 0x58
 8002664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800266c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d17b      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0f3      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d13c      	bne.n	8002710 <HAL_RCC_ClockConfig+0x178>
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x128>
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_ClockConfig+0x148>
 80026c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d2:	643b      	str	r3, [r7, #64]	; 0x40
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80026e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13a      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b2      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
 8002710:	2302      	movs	r3, #2
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e00d      	b.n	8002754 <HAL_RCC_ClockConfig+0x1bc>
 8002738:	2302      	movs	r3, #2
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2202      	movs	r2, #2
 8002756:	61ba      	str	r2, [r7, #24]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	617a      	str	r2, [r7, #20]
  return result;
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e079      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fe fa9c 	bl	8000cd0 <HAL_GetTick>
 8002798:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fa98 	bl	8000cd0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e061      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d214      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4906      	ldr	r1, [pc, #24]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e040      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	491a      	ldr	r1, [pc, #104]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4912      	ldr	r1, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283a:	f000 f829 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800283e:	4601      	mov	r1, r0
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	22f0      	movs	r2, #240	; 0xf0
 800284a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	60fa      	str	r2, [r7, #12]
  return result;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	40d3      	lsrs	r3, r2
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x2ec>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	fa21 f303 	lsr.w	r3, r1, r3
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_ClockConfig+0x2f0>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCC_ClockConfig+0x2f4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe f9ea 	bl	8000c48 <HAL_InitTick>
  
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3778      	adds	r7, #120	; 0x78
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	08004430 	.word	0x08004430
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b08b      	sub	sp, #44	; 0x2c
 8002894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e03c      	b.n	800293a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028c2:	623b      	str	r3, [r7, #32]
      break;
 80028c4:	e03c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	607a      	str	r2, [r7, #4]
  return result;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	40d3      	lsrs	r3, r2
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	220f      	movs	r2, #15
 80028f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	60fa      	str	r2, [r7, #12]
  return result;
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	40d3      	lsrs	r3, r2
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_RCC_GetSysClockFreq+0xcc>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
 8002928:	e004      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_GetSysClockFreq+0xd0>)
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	623b      	str	r3, [r7, #32]
      break;
 8002938:	e002      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293c:	623b      	str	r3, [r7, #32]
      break;
 800293e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002940:	6a3b      	ldr	r3, [r7, #32]
}
 8002942:	4618      	mov	r0, r3
 8002944:	372c      	adds	r7, #44	; 0x2c
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	007a1200 	.word	0x007a1200
 8002958:	08004448 	.word	0x08004448
 800295c:	08004458 	.word	0x08004458
 8002960:	003d0900 	.word	0x003d0900

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002982:	f7ff ffef 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	603a      	str	r2, [r7, #0]
  return result;
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	40d3      	lsrs	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08004440 	.word	0x08004440

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029c6:	f7ff ffcd 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029ca:	4601      	mov	r1, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	603a      	str	r2, [r7, #0]
  return result;
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	40d3      	lsrs	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08004440 	.word	0x08004440

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b092      	sub	sp, #72	; 0x48
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80d4 	beq.w	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a28:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10e      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4a4a      	ldr	r2, [pc, #296]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	61d3      	str	r3, [r2, #28]
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a41      	ldr	r2, [pc, #260]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f931 	bl	8000cd0 <HAL_GetTick>
 8002a6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fe f92d 	bl	8000cd0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b64      	cmp	r3, #100	; 0x64
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e13c      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8084 	beq.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d07c      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2301      	movs	r3, #1
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe f8dd 	bl	8000cd0 <HAL_GetTick>
 8002b16:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe f8d9 	bl	8000cd0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e0e6      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002b30:	2302      	movs	r3, #2
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	61fb      	str	r3, [r7, #28]
  return result;
 8002b48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d108      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b5e:	4b01      	ldr	r3, [pc, #4]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	e00d      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	10908100 	.word	0x10908100
 8002b70:	2302      	movs	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2202      	movs	r2, #2
 8002b82:	613a      	str	r2, [r7, #16]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f002 021f 	and.w	r2, r2, #31
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0b7      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4954      	ldr	r1, [pc, #336]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bdc:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4947      	ldr	r1, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f023 0210 	bic.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4940      	ldr	r1, [pc, #256]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f023 0220 	bic.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4938      	ldr	r1, [pc, #224]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4931      	ldr	r1, [pc, #196]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c54:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4929      	ldr	r1, [pc, #164]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002c72:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	491a      	ldr	r1, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	4913      	ldr	r1, [pc, #76]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	490b      	ldr	r1, [pc, #44]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3748      	adds	r7, #72	; 0x48
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e049      	b.n	8002db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fdf0 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 fb1e 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e049      	b.n	8002e60 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f841 	bl	8002e68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f000 fac7 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_IC_Start+0x1a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e023      	b.n	8002ede <HAL_TIM_IC_Start+0x62>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_IC_Start+0x2a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e01b      	b.n	8002ede <HAL_TIM_IC_Start+0x62>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_IC_Start+0x3a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e013      	b.n	8002ede <HAL_TIM_IC_Start+0x62>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_IC_Start+0x4a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_IC_Start+0x62>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_IC_Start+0x5a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e003      	b.n	8002ede <HAL_TIM_IC_Start+0x62>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <HAL_TIM_IC_Start+0x74>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e013      	b.n	8002f18 <HAL_TIM_IC_Start+0x9c>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d104      	bne.n	8002f00 <HAL_TIM_IC_Start+0x84>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e00b      	b.n	8002f18 <HAL_TIM_IC_Start+0x9c>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d104      	bne.n	8002f10 <HAL_TIM_IC_Start+0x94>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e003      	b.n	8002f18 <HAL_TIM_IC_Start+0x9c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07e      	b.n	8003028 <HAL_TIM_IC_Start+0x1ac>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_IC_Start+0xbe>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f38:	e023      	b.n	8002f82 <HAL_TIM_IC_Start+0x106>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_IC_Start+0xce>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f48:	e01b      	b.n	8002f82 <HAL_TIM_IC_Start+0x106>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_IC_Start+0xde>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_IC_Start+0x106>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_IC_Start+0xee>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_IC_Start+0x106>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_IC_Start+0xfe>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_IC_Start+0x106>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_IC_Start+0x116>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f90:	e013      	b.n	8002fba <HAL_TIM_IC_Start+0x13e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_IC_Start+0x126>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa0:	e00b      	b.n	8002fba <HAL_TIM_IC_Start+0x13e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_IC_Start+0x136>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fb0:	e003      	b.n	8002fba <HAL_TIM_IC_Start+0x13e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fc8a 	bl	80038dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_TIM_IC_Start+0x1b4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIM_IC_Start+0x16a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_IC_Start+0x16a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIM_IC_Start+0x1b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d115      	bne.n	8003012 <HAL_TIM_IC_Start+0x196>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_TIM_IC_Start+0x1bc>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d015      	beq.n	8003024 <HAL_TIM_IC_Start+0x1a8>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffe:	d011      	beq.n	8003024 <HAL_TIM_IC_Start+0x1a8>
    {
      __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003010:	e008      	b.n	8003024 <HAL_TIM_IC_Start+0x1a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e000      	b.n	8003026 <HAL_TIM_IC_Start+0x1aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40014000 	.word	0x40014000
 8003038:	00010007 	.word	0x00010007

0800303c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003056:	2302      	movs	r3, #2
 8003058:	e088      	b.n	800316c <HAL_TIM_IC_ConfigChannel+0x130>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003078:	f000 fa8a 	bl	8003590 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 020c 	bic.w	r2, r2, #12
 800308a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	619a      	str	r2, [r3, #24]
 800309e:	e060      	b.n	8003162 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d11c      	bne.n	80030e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80030b6:	f000 faf0 	bl	800369a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6999      	ldr	r1, [r3, #24]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	021a      	lsls	r2, r3, #8
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	619a      	str	r2, [r3, #24]
 80030de:	e040      	b.n	8003162 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d11b      	bne.n	800311e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80030f6:	f000 fb3d 	bl	8003774 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 020c 	bic.w	r2, r2, #12
 8003108:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	61da      	str	r2, [r3, #28]
 800311c:	e021      	b.n	8003162 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d11c      	bne.n	800315e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003134:	f000 fb5a 	bl	80037ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003146:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69d9      	ldr	r1, [r3, #28]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	61da      	str	r2, [r3, #28]
 800315c:	e001      	b.n	8003162 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIM_ConfigClockSource+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e0b6      	b.n	80032fe <HAL_TIM_ConfigClockSource+0x18a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d03e      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xd8>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	f200 8087 	bhi.w	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	f000 8086 	beq.w	80032ea <HAL_TIM_ConfigClockSource+0x176>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d87f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d01a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xaa>
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d87b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d050      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x11e>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d877      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d03c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xfe>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d873      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d058      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x13e>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d86f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d064      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d86b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d060      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d867      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d05a      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15e>
 800321c:	e062      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800322e:	f000 fb35 	bl	800389c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	609a      	str	r2, [r3, #8]
      break;
 800324a:	e04f      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800325c:	f000 fb1e 	bl	800389c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e03c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f9dc 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f000 faeb 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 8003290:	e02c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 fa38 	bl	8003714 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2160      	movs	r1, #96	; 0x60
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fadb 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80032b0:	e01c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f9bc 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 facb 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 fac2 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80032e2:	e003      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e000      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_TIM_SlaveConfigSynchro+0x18>
 800331a:	2302      	movs	r3, #2
 800331c:	e031      	b.n	8003382 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f899 	bl	8003468 <TIM_SlaveTimer_SetConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e018      	b.n	8003382 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800336e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <TIM_Base_SetConfig+0xcc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_Base_SetConfig+0x20>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033aa:	d108      	bne.n	80033be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a25      	ldr	r2, [pc, #148]	; (8003458 <TIM_Base_SetConfig+0xcc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_Base_SetConfig+0x5a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0x5a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <TIM_Base_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0x5a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a21      	ldr	r2, [pc, #132]	; (8003460 <TIM_Base_SetConfig+0xd4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0x5a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a20      	ldr	r2, [pc, #128]	; (8003464 <TIM_Base_SetConfig+0xd8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <TIM_Base_SetConfig+0xcc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_Base_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0d      	ldr	r2, [pc, #52]	; (800345c <TIM_Base_SetConfig+0xd0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_Base_SetConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <TIM_Base_SetConfig+0xd4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_Base_SetConfig+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <TIM_Base_SetConfig+0xd8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d103      	bne.n	8003444 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	615a      	str	r2, [r3, #20]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400
 8003464:	40014800 	.word	0x40014800

08003468 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b70      	cmp	r3, #112	; 0x70
 80034b4:	d01a      	beq.n	80034ec <TIM_SlaveTimer_SetConfig+0x84>
 80034b6:	2b70      	cmp	r3, #112	; 0x70
 80034b8:	d860      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
 80034ba:	2b60      	cmp	r3, #96	; 0x60
 80034bc:	d054      	beq.n	8003568 <TIM_SlaveTimer_SetConfig+0x100>
 80034be:	2b60      	cmp	r3, #96	; 0x60
 80034c0:	d85c      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
 80034c2:	2b50      	cmp	r3, #80	; 0x50
 80034c4:	d046      	beq.n	8003554 <TIM_SlaveTimer_SetConfig+0xec>
 80034c6:	2b50      	cmp	r3, #80	; 0x50
 80034c8:	d858      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d019      	beq.n	8003502 <TIM_SlaveTimer_SetConfig+0x9a>
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d854      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d055      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x11a>
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d850      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d051      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x11a>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d84c      	bhi.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04d      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x11a>
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d04b      	beq.n	8003582 <TIM_SlaveTimer_SetConfig+0x11a>
 80034ea:	e047      	b.n	800357c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	f000 f9ce 	bl	800389c <TIM_ETR_SetConfig>
      break;
 8003500:	e040      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d101      	bne.n	800350e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e03b      	b.n	8003586 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003534:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
      break;
 8003552:	e017      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003560:	461a      	mov	r2, r3
 8003562:	f000 f86b 	bl	800363c <TIM_TI1_ConfigInputStage>
      break;
 8003566:	e00d      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003574:	461a      	mov	r2, r3
 8003576:	f000 f8cd 	bl	8003714 <TIM_TI2_ConfigInputStage>
      break;
 800357a:	e003      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
      break;
 8003580:	e000      	b.n	8003584 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003582:	bf00      	nop
  }

  return status;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0201 	bic.w	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <TIM_TI1_SetConfig+0xa4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_TI1_SetConfig+0x3e>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d003      	beq.n	80035ce <TIM_TI1_SetConfig+0x3e>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <TIM_TI1_SetConfig+0xa8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <TIM_TI1_SetConfig+0x42>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <TIM_TI1_SetConfig+0x44>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e003      	b.n	80035f2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f023 030a 	bic.w	r3, r3, #10
 800360c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 030a 	and.w	r3, r3, #10
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40014000 	.word	0x40014000

0800363c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 030a 	bic.w	r3, r3, #10
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f023 0210 	bic.w	r2, r3, #16
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	b29b      	uxth	r3, r3
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f023 0210 	bic.w	r2, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	031b      	lsls	r3, r3, #12
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	621a      	str	r2, [r3, #32]
}
 8003768:	bf00      	nop
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 0303 	bic.w	r3, r3, #3
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800382a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	031b      	lsls	r3, r3, #12
 8003830:	b29b      	uxth	r3, r3
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800383e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	f043 0307 	orr.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	021a      	lsls	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	431a      	orrs	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2201      	movs	r2, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	401a      	ands	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800393c:	2302      	movs	r3, #2
 800393e:	e04f      	b.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d108      	bne.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003970:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a14      	ldr	r2, [pc, #80]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d004      	beq.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10c      	bne.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40014000 	.word	0x40014000

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e040      	b.n	8003a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd f822 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8bc 	bl	8003bb0 <UART_SetConfig>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e022      	b.n	8003a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9e6 	bl	8003e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fa6d 	bl	8003f60 <UART_CheckIdleState>
 8003a86:	4603      	mov	r3, r0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d165      	bne.n	8003b72 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Transmit_DMA+0x22>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e05e      	b.n	8003b74 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2221      	movs	r2, #33	; 0x21
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d027      	beq.n	8003b32 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <HAL_UART_Transmit_DMA+0xec>)
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_UART_Transmit_DMA+0xf0>)
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_UART_Transmit_DMA+0xf4>)
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	2200      	movs	r2, #0
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3328      	adds	r3, #40	; 0x28
 8003b12:	461a      	mov	r2, r3
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	f7fd fa3f 	bl	8000f98 <HAL_DMA_Start_IT>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2210      	movs	r2, #16
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e020      	b.n	8003b74 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	623a      	str	r2, [r7, #32]
 8003b5c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e5      	bne.n	8003b3a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3728      	adds	r7, #40	; 0x28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	08004293 	.word	0x08004293
 8003b80:	08004327 	.word	0x08004327
 8003b84:	08004343 	.word	0x08004343

08003b88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <UART_SetConfig+0x254>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a78      	ldr	r2, [pc, #480]	; (8003e08 <UART_SetConfig+0x258>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d120      	bne.n	8003c6e <UART_SetConfig+0xbe>
 8003c2c:	4b77      	ldr	r3, [pc, #476]	; (8003e0c <UART_SetConfig+0x25c>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d817      	bhi.n	8003c68 <UART_SetConfig+0xb8>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0x90>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c5d 	.word	0x08003c5d
 8003c48:	08003c63 	.word	0x08003c63
 8003c4c:	08003c57 	.word	0x08003c57
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e01d      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e01a      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e017      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e014      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e011      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <UART_SetConfig+0x260>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d102      	bne.n	8003c7e <UART_SetConfig+0xce>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e009      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a64      	ldr	r2, [pc, #400]	; (8003e14 <UART_SetConfig+0x264>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d102      	bne.n	8003c8e <UART_SetConfig+0xde>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e001      	b.n	8003c92 <UART_SetConfig+0xe2>
 8003c8e:	2310      	movs	r3, #16
 8003c90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d15a      	bne.n	8003d52 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003c9c:	7ffb      	ldrb	r3, [r7, #31]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d827      	bhi.n	8003cf2 <UART_SetConfig+0x142>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0xf8>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fe56 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61b8      	str	r0, [r7, #24]
        break;
 8003cd2:	e013      	b.n	8003cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fe74 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	61b8      	str	r0, [r7, #24]
        break;
 8003cda:	e00f      	b.n	8003cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b4e      	ldr	r3, [pc, #312]	; (8003e18 <UART_SetConfig+0x268>)
 8003cde:	61bb      	str	r3, [r7, #24]
        break;
 8003ce0:	e00c      	b.n	8003cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe fdd5 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8003ce6:	61b8      	str	r0, [r7, #24]
        break;
 8003ce8:	e008      	b.n	8003cfc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	61bb      	str	r3, [r7, #24]
        break;
 8003cf0:	e004      	b.n	8003cfc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8003cfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d074      	beq.n	8003dec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	005a      	lsls	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	d916      	bls.n	8003d4c <UART_SetConfig+0x19c>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d212      	bcs.n	8003d4c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f023 030f 	bic.w	r3, r3, #15
 8003d2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	89fa      	ldrh	r2, [r7, #14]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e04f      	b.n	8003dec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77bb      	strb	r3, [r7, #30]
 8003d50:	e04c      	b.n	8003dec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d828      	bhi.n	8003daa <UART_SetConfig+0x1fa>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x1b0>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003dab 	.word	0x08003dab
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fdfa 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003d88:	61b8      	str	r0, [r7, #24]
        break;
 8003d8a:	e013      	b.n	8003db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe fe18 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003d90:	61b8      	str	r0, [r7, #24]
        break;
 8003d92:	e00f      	b.n	8003db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <UART_SetConfig+0x268>)
 8003d96:	61bb      	str	r3, [r7, #24]
        break;
 8003d98:	e00c      	b.n	8003db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7fe fd79 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8003d9e:	61b8      	str	r0, [r7, #24]
        break;
 8003da0:	e008      	b.n	8003db4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	61bb      	str	r3, [r7, #24]
        break;
 8003da8:	e004      	b.n	8003db4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	77bb      	strb	r3, [r7, #30]
        break;
 8003db2:	bf00      	nop
    }

    if (pclk != 0U)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d018      	beq.n	8003dec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085a      	lsrs	r2, r3, #1
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b0f      	cmp	r3, #15
 8003dd2:	d909      	bls.n	8003de8 <UART_SetConfig+0x238>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dda:	d205      	bcs.n	8003de8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	e001      	b.n	8003dec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003df8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	efff69f3 	.word	0xefff69f3
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40004400 	.word	0x40004400
 8003e14:	40004800 	.word	0x40004800
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1a:	d10a      	bne.n	8003f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b098      	sub	sp, #96	; 0x60
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f70:	f7fc feae 	bl	8000cd0 <HAL_GetTick>
 8003f74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d12e      	bne.n	8003fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f88c 	bl	80040b0 <UART_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d021      	beq.n	8003fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e6      	bne.n	8003f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e062      	b.n	80040a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d149      	bne.n	8004084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f856 	bl	80040b0 <UART_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03c      	beq.n	8004084 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	623b      	str	r3, [r7, #32]
   return(result);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
 800402a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800402e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	60fb      	str	r3, [r7, #12]
   return(result);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405c:	61fa      	str	r2, [r7, #28]
 800405e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	617b      	str	r3, [r7, #20]
   return(result);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e011      	b.n	80040a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3758      	adds	r7, #88	; 0x58
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c0:	e049      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d045      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fc fe01 	bl	8000cd0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e048      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d031      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d110      	bne.n	8004122 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2208      	movs	r2, #8
 8004106:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f85e 	bl	80041ca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2208      	movs	r2, #8
 8004112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e029      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004130:	d111      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f844 	bl	80041ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d0a6      	beq.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b089      	sub	sp, #36	; 0x24
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	60bb      	str	r3, [r7, #8]
   return(result);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	613b      	str	r3, [r7, #16]
   return(result);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e6      	bne.n	8004186 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80041be:	bf00      	nop
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b095      	sub	sp, #84	; 0x54
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f0:	643b      	str	r3, [r7, #64]	; 0x40
 80041f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	61fb      	str	r3, [r7, #28]
   return(result);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	64bb      	str	r3, [r7, #72]	; 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2b01      	cmp	r3, #1
 800423e:	d118      	bne.n	8004272 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	60bb      	str	r3, [r7, #8]
   return(result);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	647b      	str	r3, [r7, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004286:	bf00      	nop
 8004288:	3754      	adds	r7, #84	; 0x54
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b090      	sub	sp, #64	; 0x40
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d037      	beq.n	8004318 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80042a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	623b      	str	r3, [r7, #32]
   return(result);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042d0:	633a      	str	r2, [r7, #48]	; 0x30
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	617b      	str	r3, [r7, #20]
   return(result);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004316:	e002      	b.n	800431e <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8004318:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800431a:	f7fc f9fb 	bl	8000714 <HAL_UART_TxCpltCallback>
}
 800431e:	bf00      	nop
 8004320:	3740      	adds	r7, #64	; 0x40
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff fc27 	bl	8003b88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004354:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d109      	bne.n	8004380 <UART_DMAError+0x3e>
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b21      	cmp	r3, #33	; 0x21
 8004370:	d106      	bne.n	8004380 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff feff 	bl	800417e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d109      	bne.n	80043a2 <UART_DMAError+0x60>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b22      	cmp	r3, #34	; 0x22
 8004392:	d106      	bne.n	80043a2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800439c:	6978      	ldr	r0, [r7, #20]
 800439e:	f7ff ff14 	bl	80041ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f7ff fbf2 	bl	8003b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b8:	bf00      	nop
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	; (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	; (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	; (8004414 <__libc_init_array+0x44>)
 80043e4:	f000 f818 	bl	8004418 <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08004468 	.word	0x08004468
 800440c:	08004468 	.word	0x08004468
 8004410:	08004468 	.word	0x08004468
 8004414:	0800446c 	.word	0x0800446c

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
